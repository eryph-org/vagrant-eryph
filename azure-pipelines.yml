# Triggers
trigger:
  branches:
    include:
    - main
  paths:
    exclude:
    - '*.md'

# Runtime parameters
parameters:
- name: publishToRubygems
  type: boolean
  default: false
  displayName: 'Publish to RubyGems'

pool:
  name: eryph
  demands:
  - Agent.Name -equals vsts-agent

variables:
  RUBY_VERSION: '3.4'
  BUNDLER_VERSION: '2.4.10'
  RUBY_PATH: 'C:\Ruby34-x64\bin'
  VAGRANT_PATH: 'C:\Program Files\Vagrant\bin'
  PUBLISH_TO_RUBYGEMS: ${{ parameters.publishToRubygems }}

stages:
# Stage 1: Build and Test
- stage: Build
  displayName: 'Build and Test'
  jobs:
  - job: TestAndBuild
    displayName: 'Test Vagrant Plugin and Build Gem'

    steps:
    # Update RubyGems and install Bundler
    - script: |
        set PATH=$(RUBY_PATH);%PATH%
        gem update --system --no-document
        gem install bundler -v $(BUNDLER_VERSION) --no-document
      displayName: 'Update RubyGems and install Bundler'

    # Install dependencies
    - script: |
        set PATH=$(RUBY_PATH);%PATH%
        bundle install --jobs 4 --retry 3
      displayName: 'Bundle install'

    # Run unit tests
    - script: |
        set PATH=$(RUBY_PATH);%PATH%
        bundle exec rake unit:ci
      displayName: 'Run unit tests'
      continueOnError: true


    # Build gem
    - script: |
        set PATH=$(RUBY_PATH);%PATH%
        bundle exec rake build
      displayName: 'Build vagrant-eryph gem'

    # Install plugin for E2E testing
    - script: |
        set PATH=$(RUBY_PATH);$(VAGRANT_PATH);%PATH%
        vagrant --version
        vagrant plugin install vagrant-eryph-*.gem
      displayName: 'Install plugin for E2E tests'

    # Run E2E tests (Eryph environment available)
    - script: |
        set PATH=$(RUBY_PATH);$(VAGRANT_PATH);%PATH%
        bundle exec rake e2e:ci
      displayName: 'Run E2E tests'
      continueOnError: true

    # Create artifacts directory and copy gem
    - script: |
        mkdir $(Build.ArtifactStagingDirectory)\gems
        copy vagrant-eryph-*.gem $(Build.ArtifactStagingDirectory)\gems\
      displayName: 'Prepare gem artifacts'

    # Publish test results
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'test-results-*.xml'
        failTaskOnFailedTests: true
        testRunTitle: 'Vagrant Eryph Plugin Tests'
      displayName: 'Publish test results'
      condition: always()

    # Publish gem artifacts
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)\gems'
        artifactName: 'vagrant-eryph-gem'
        artifactType: 'container'
      displayName: 'Publish gem artifacts'
      condition: succeeded()

    # Display build summary
    - script: |
        set PATH=$(RUBY_PATH);%PATH%
        echo "=== Build Summary ==="
        ruby --version
        bundle --version
        echo "Built gems:"
        dir vagrant-eryph-*.gem
        echo "=== End Summary ==="
      displayName: 'Build summary'
      condition: always()

# Stage 2: Deploy to RubyGems
- stage: Deploy
  displayName: 'Deploy to RubyGems'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['PUBLISH_TO_RUBYGEMS'], 'true'))
  jobs:
  - deployment: DeployToRubyGems
    displayName: 'Publish to RubyGems.org'
    environment: rubygems-production
    pool:
      name: eryph
      demands:
      - Agent.Name -equals vsts-agent
    variables:
    - group: rubygems-eryph
    strategy:
      runOnce:
        deploy:
          steps:
          # Download gem artifacts from build stage
          - download: current
            artifact: vagrant-eryph-gem
            displayName: 'Download gem artifact'

          # Set up Ruby environment
          - script: |
              set PATH=$(RUBY_PATH);%PATH%
              gem update --system --no-document
              gem install bundler -v $(BUNDLER_VERSION) --no-document
            displayName: 'Set up Ruby environment'

          # Verify gem file exists
          - script: |
              dir $(Pipeline.Workspace)\vagrant-eryph-gem\
              if not exist "$(Pipeline.Workspace)\vagrant-eryph-gem\vagrant-eryph-*.gem" (
                echo "ERROR: No gem file found in artifacts"
                exit 1
              )
            displayName: 'Verify gem artifact'

          # Configure RubyGems credentials
          - script: |
              set PATH=$(RUBY_PATH);%PATH%
              mkdir %USERPROFILE%\.gem 2>nul || echo Directory exists
              echo ---> %USERPROFILE%\.gem\credentials
              echo :rubygems_api_key: $(RUBYGEMS_API_TOKEN)> %USERPROFILE%\.gem\credentials
            displayName: 'Configure RubyGems credentials'
            env:
              RUBYGEMS_API_TOKEN: $(RUBYGEMS_API_TOKEN)

          # Publish gem to RubyGems
          - script: |
              set PATH=$(RUBY_PATH);%PATH%
              cd $(Pipeline.Workspace)\vagrant-eryph-gem
              for %%f in (vagrant-eryph-*.gem) do (
                echo Publishing gem: %%f
                gem push %%f
              )
            displayName: 'Publish gem to RubyGems'

          # Clean up credentials
          - script: |
              if exist "%USERPROFILE%\.gem\credentials" del "%USERPROFILE%\.gem\credentials"
            displayName: 'Clean up credentials'
            condition: always()